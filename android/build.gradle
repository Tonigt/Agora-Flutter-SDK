group 'io.agora.agora_rtc_engine'
version '1.0-SNAPSHOT'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
  ext.agora_rtc_engine_kt_version = '1.5.31'
  def kotlin_version = rootProject.ext.has('kotlin_version') ? rootProject.ext.get('kotlin_version') : "$agora_rtc_engine_kt_version"

  repositories {
    maven { url 'http://maven.faceunity.com/repository/maven-public/' }
    mavenCentral()
    google()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

rootProject.allprojects {
  repositories {
    maven { url 'http://maven.faceunity.com/repository/maven-public/' }
    mavenCentral()
    google()
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 31)

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 16)

    consumerProguardFiles 'consumer-rules.pro'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'

    if (isDev(project)) {
      main.jniLibs.srcDirs += 'libs'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {
  if (isDev(project)) {
    api fileTree(dir: "libs", include: ["*.jar", "*.aar"])
  } else {
    api 'io.agora.rtc:iris-rtc:3.6.2-fix.1'
  }

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${safeExtGet('kotlin_version', "$agora_rtc_engine_kt_version")}"
}

static boolean isDev(Project project) {
  def devFile = project.file('.plugin_dev')
  return devFile.exists()
  api 'com.github.agorabuilder:native-full-sdk:3.5.1'
  api 'com.faceunity:core:7.4.1.0'
  api 'com.faceunity:model:7.4.1.0'
  implementation 'com.google.code.gson:gson:2.8.6'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${safeExtGet('kotlin_version', '1.3.72')}"
}
